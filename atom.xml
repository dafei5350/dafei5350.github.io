<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dafei5350.github.io</id>
    <title>微凉</title>
    <updated>2021-02-24T16:53:16.750Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dafei5350.github.io"/>
    <link rel="self" href="https://dafei5350.github.io/atom.xml"/>
    <subtitle>你如今的气质里，藏着你读过的书和你爱过的人</subtitle>
    <logo>https://dafei5350.github.io/images/avatar.png</logo>
    <icon>https://dafei5350.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 微凉</rights>
    <entry>
        <title type="html"><![CDATA[Yarn 简记]]></title>
        <id>https://dafei5350.github.io/post/ddd/</id>
        <link href="https://dafei5350.github.io/post/ddd/">
        </link>
        <updated>2021-02-24T16:27:02.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>代码通过包（package） (或者称为 模块（module）) 的方式来共享。 一个包里包含所有需要共享的代码，以及描述包信息的文件，称为 package.json。在一个Node.js项目中，package.json几乎是一个必须的文件，它的主要作用就是管理项目中所使用到的外部依赖包，同时它也是npm命令的入口文件。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>代码通过包（package） (或者称为 模块（module）) 的方式来共享。 一个包里包含所有需要共享的代码，以及描述包信息的文件，称为 package.json。在一个Node.js项目中，package.json几乎是一个必须的文件，它的主要作用就是管理项目中所使用到的外部依赖包，同时它也是npm命令的入口文件。</p>
</blockquote>
<!-- more -->
<h3 id="安装">安装</h3>
<p>yarn 安装请进 <a href="https://yarn.bootcss.com/docs/install/#mac-stable">传送门</a></p>
<h2 id="简易指南">简易指南</h2>
<h3 id="初始化一个新的项目">初始化一个新的项目</h3>
<pre><code class="language-bash">yarn init
</code></pre>
<h3 id="添加一个新的项目">添加一个新的项目</h3>
<pre><code class="language-bash">yarn add [package]
yarn add [package]@[version]
yarn add [package]@[tag]
</code></pre>
<h3 id="安装项目的全部依赖">安装项目的全部依赖</h3>
<pre><code class="language-bash">yarn 
//或者
yarn install
</code></pre>
<h3 id="devdependencies-peerdependencies-和-optionaldependencies的含义以及区别">devDependencies、peerDependencies 和 optionalDependencies的含义以及区别</h3>
<p>npm 目前支持以下几类依赖包管理：</p>
<ul>
<li>dependencies</li>
<li>devDependenciesx</li>
<li>peerDependencies</li>
<li>optionalDependencies</li>
<li>bundledDependencies / bundleDependencies</li>
</ul>
<p><strong>dependencies</strong></p>
<p>应用依赖，或者叫做业务依赖，这是我们最常用的依赖包管理对象！它用于指定应用依赖的外部包，这些依赖是应用发布后正常执行时所需要的，但不包含测试时或者本地打包时所使用的包。</p>
<p><strong>devDependencies</strong></p>
<p>开发环境依赖，仅次于dependencies的使用频率！它的对象定义和dependencies一样，只不过它里面的包只用于开发环境，不用于生产环境，这些包通常是单元测试或者打包工具等，例如gulp, grunt, webpack, moca, coffee等。</p>
<p><strong>peerDependencies</strong></p>
<p>同等依赖，或者叫同伴依赖，用于指定当前包（也就是你写的包）兼容的宿主版本。如何理解呢？ 试想一下，我们编写一个gulp的插件，而gulp却有多个主版本，我们只想兼容最新的版本，此时就可以用同等依赖（peerDependencies）来指定。</p>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;gulp-my-plugin&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;peerDependencies&quot;: {
    &quot;gulp&quot;: &quot;3.x&quot;
  }
}

</code></pre>
<p><strong>optionalDependencies</strong></p>
<p>可选依赖，如果有一些依赖包即使安装失败，项目仍然能够运行或者希望npm继续运行，就可以使用optionalDependencies。另外optionalDependencies会覆盖dependencies中的同名依赖包，所以不要在两个地方都写。</p>
<p><strong>bundledDependencies / bundleDependencies</strong></p>
<p>打包依赖，bundledDependencies是一个包含依赖包名的数组对象，在发布时会将这个对象中的包打包到最终的发布包里。</p>
<h3 id="将依赖项添加到不同依赖项类别中">将依赖项添加到不同依赖项类别中</h3>
<p>分别添加到 devDependencies、peerDependencies 和 optionalDependencies 类别中：</p>
<pre><code class="language-bash">yarn add [package] --dev
yarn add [package] --peer
yarn add [package] --optional
</code></pre>
<h3 id="升级依赖包">升级依赖包</h3>
<pre><code class="language-bash">yarn upgrade [package]
yarn upgrade [package]@[version]
yarn upgrade [package]@[tag]
</code></pre>
<h3 id="移除依赖包">移除依赖包</h3>
<pre><code class="language-bash">yarn remove [package]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://dafei5350.github.io/post/hello-gridea/</id>
        <link href="https://dafei5350.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>